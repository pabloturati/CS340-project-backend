#!/usr/bin/env node

const http = require('http')
let app = require('../app')
const queries = require('../shared/queries')

const {
  createUserTable,
  createListsTable,
  createGenresTable,
  createListItemsTable
} = queries.initializeDBQueries
// console.log(createListItemsTable)

// catch 404 and render a not-found.hbs template
app.use(function (req, res) {
  res.status(404)
  res.render('not-found.hbs')
})

app.use((err, req, res, next) => {
  // log the error
  console.error('ERROR', req.method, req.path, err)

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500)
    res.render('error.hbs')
  }
})

let server = http.createServer(app)

server.on('error', error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`)
      process.exit(1)
    default:
      throw error
  }
})

//Port is provided from .env
app.set('port', process.env.PORT)
server.listen(app.get('port'), () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`)
})

//Init table creations
server.on('listening', () => {
  createUserTable()
    .then(
      createGenresTable()
        .then(
          createListsTable()
            .then(
              createListItemsTable()
                .then(() => {
                  console.log('All DB tables created and loaded successfully')
                })
                .catch(e => {
                  console.error(e)
                })
            )
            .catch(e => {
              console.error(e)
            })
        )
        .catch(e => {
          console.error(e)
        })
    )
    .catch(e => {
      console.error(e)
    })
})
